import streamlit as st
import numpy as np
from typing import List
from src.validation.validators import ValidationResult, ValidationError, ValidationErrorType

class ErrorDisplayManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ Streamlit"""

    @staticmethod
    def display_validation_result(result: ValidationResult, title: str = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"):
        if result.is_valid and not result.warnings:
            st.success(f"‚úÖ {title}: –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return
        if not result.is_valid:
            st.error(f"‚ùå {title}: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏")
            ErrorDisplayManager._display_errors(result.errors)
        if result.warnings:
            st.warning(f"‚ö†Ô∏è {title}: –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
            ErrorDisplayManager._display_warnings(result.warnings)

    @staticmethod
    def _display_errors(errors: List[ValidationError]):
        for error in errors:
            with st.expander(f"üî¥ {error.message}", expanded=False):
                col1, col2 = st.columns(2)
                with col1:
                    st.write("**–ü–æ–ª–µ:**", error.field)
                    st.write("**–ó–Ω–∞—á–µ–Ω–∏–µ:**", error.value)
                    st.write("**–¢–∏–ø –æ—à–∏–±–∫–∏:**", error.error_type.value)
                with col2:
                    if error.suggestion:
                        st.info(f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {error.suggestion}")
                ErrorDisplayManager._show_error_help(error.error_type)

    @staticmethod
    def _display_warnings(warnings: List[str]):
        for warning in warnings:
            st.warning(f"‚ö†Ô∏è {warning}")

    @staticmethod
    def _show_error_help(error_type: ValidationErrorType):
        help_texts = {
            ValidationErrorType.DIMENSION_ERROR: """
**–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º:**
- –†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 0.1 —Å–º
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 500 —Å–º
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
""",
            ValidationErrorType.WEIGHT_ERROR: """
**–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤–µ—Å—É:**
- –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: 0.01 –∫–≥
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: 1000 –∫–≥
- –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
""",
            ValidationErrorType.DENSITY_ERROR: """
**–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏:**
- –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –≤–µ—Å–∞
- –¢–∏–ø–∏—á–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: 0.1-2.0 –∫–≥/–¥–º¬≥
""",
            ValidationErrorType.PALLET_ERROR: """
**–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–¥–¥–æ–Ω—É:**
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: 80x120, 100x120 —Å–º
- –í—ã—Å–æ—Ç–∞ –æ–±—ã—á–Ω–æ 15-20 —Å–º
- –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å: 500-1500 –∫–≥
"""
        }
        if error_type in help_texts:
            st.info(help_texts[error_type])

    @staticmethod
    def display_file_errors(file_errors: List[str]):
        if file_errors:
            st.error("–û—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–µ:")
            for error in file_errors:
                st.write(f"‚Ä¢ {error}")

    @staticmethod
    def display_summary_stats(boxes: List[dict], validation_result: ValidationResult):
        if not boxes:
            return

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("–í—Å–µ–≥–æ –∫–æ—Ä–æ–±–æ–∫", len(boxes))
        with col2:
            total_weight = sum(box.get('weight', 0) for box in boxes)
            st.metric("–û–±—â–∏–π –≤–µ—Å", f"{total_weight:.1f} –∫–≥")
        with col3:
            total_volume = sum(
                (box.get('length', 0) * box.get('width', 0) * box.get('height', 0)) / 1000000
                for box in boxes
            )
            st.metric("–û–±—â–∏–π –æ–±—ä–µ–º", f"{total_volume:.2f} –º¬≥")
        with col4:
            error_count = len(validation_result.errors) if validation_result else 0
            warning_count = len(validation_result.warnings) if validation_result else 0
            st.metric("–û—à–∏–±–æ–∫/–ü—Ä–µ–¥—É–ø—Ä.", f"{error_count}/{warning_count}")

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.write("**–†–∞–∑–º–µ—Ä—ã:**")
            lengths = [box.get('length', 0) for box in boxes]
            widths = [box.get('width', 0) for box in boxes]
            heights = [box.get('height', 0) for box in boxes]
            st.write(f"‚Ä¢ –î–ª–∏–Ω–∞: {min(lengths):.1f} - {max(lengths):.1f} —Å–º")
            st.write(f"‚Ä¢ –®–∏—Ä–∏–Ω–∞: {min(widths):.1f} - {max(widths):.1f} —Å–º")
            st.write(f"‚Ä¢ –í—ã—Å–æ—Ç–∞: {min(heights):.1f} - {max(heights):.1f} —Å–º")
            st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ: {np.mean(lengths):.1f}√ó{np.mean(widths):.1f}√ó{np.mean(heights):.1f} —Å–º")
        with col2:
            st.write("**–í–µ—Å:**")
            weights = [box.get('weight', 0) for box in boxes]
            st.write(f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {min(weights):.1f} - {max(weights):.1f} –∫–≥")
            st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: {np.mean(weights):.1f} –∫–≥")
            st.write(f"‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {np.median(weights):.1f} –∫–≥")
            light_boxes = sum(1 for w in weights if w < 1)
            medium_boxes = sum(1 for w in weights if 1 <= w < 10)
            heavy_boxes = sum(1 for w in weights if w >= 10)
            st.write(f"‚Ä¢ –õ–µ–≥–∫–∏–µ (<1–∫–≥): {light_boxes}")
            st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ (1-10–∫–≥): {medium_boxes}")
            st.write(f"‚Ä¢ –¢—è–∂–µ–ª—ã–µ (>10–∫–≥): {heavy_boxes}")
        with col3:
            st.write("**–ü–ª–æ—Ç–Ω–æ—Å—Ç—å:**")
            densities = []
            for box in boxes:
                volume_dm3 = (box.get('length', 0) * box.get('width', 0) * box.get('height', 0)) / 1000
                if volume_dm3 > 0:
                    density = box.get('weight', 0) / volume_dm3
                    densities.append(density)
            if densities:
                st.write(f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {min(densities):.2f} - {max(densities):.2f} –∫–≥/–¥–º¬≥")
                st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {np.mean(densities):.2f} –∫–≥/–¥–º¬≥")
                very_light = sum(1 for d in densities if d < 0.1)
                light = sum(1 for d in densities if 0.1 <= d < 0.5)
                normal = sum(1 for d in densities if 0.5 <= d < 2.0)
                heavy = sum(1 for d in densities if d >= 2.0)
                st.write(f"‚Ä¢ –û—á–µ–Ω—å –ª–µ–≥–∫–∏–µ: {very_light}")
                st.write(f"‚Ä¢ –õ–µ–≥–∫–∏–µ: {light}")
                st.write(f"‚Ä¢ –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ: {normal}")
                st.write(f"‚Ä¢ –¢—è–∂–µ–ª—ã–µ: {heavy}")

        # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        st.subheader("üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ—Ä–æ–±–æ–∫")
        fragile_count = sum(1 for box in boxes if box.get('fragile', False))
        non_stackable_count = sum(1 for box in boxes if not box.get('stackable', True))
        cube_like = sum(1 for box in boxes if abs(box.get('length', 0) - box.get('width', 0)) < 5 and abs(box.get('width', 0) - box.get('height', 0)) < 5)
        flat_boxes = sum(1 for box in boxes if min(box.get('length', 0), box.get('width', 0), box.get('height', 0)) < 10)
        long_boxes = sum(1 for box in boxes if max(box.get('length', 0), box.get('width', 0), box.get('height', 0)) > min(box.get('length', 0), box.get('width', 0), box.get('height', 0)) * 3)
        st.write(f"üî∏ –•—Ä—É–ø–∫–∏–µ: {fragile_count}")
        st.write(f"üî∏ –ù–µ—É–∫–ª–∞–¥—ã–≤–∞–µ–º—ã–µ: {non_stackable_count}")
        st.write(f"üî∏ –ö—É–±–∏—á–µ—Å–∫–∏–µ: {cube_like}")
        st.write(f"üî∏ –ü–ª–æ—Å–∫–∏–µ: {flat_boxes}")
        st.write(f"üî∏ –î–ª–∏–Ω–Ω—ã–µ: {long_boxes}")